//
// Created by hiccup on 2020/5/2.
//
#pragma once

#include <vector>
#include <string>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <nlohmann/json.hpp>

namespace TestingFramework {
    ///using part
    using std::vector;
    using std::string;
    using nlohmann::json;

    struct MR_Parameter {

        string uuid;                    //!< generated by init_uuid as index;
        string name;
        string description;
        string reference_file;          //!< implementation .so file / dll file
        string reference_class_name;    //!< metamorphic relation implementation class
        vector<unsigned> testunit_seeds;//!< random seeds for origin case of TestUnits, #TestUnit_seeds == #TestUnit
        string MR_para_str;             //!< dumped json str for special parameter

        static string init_uuid()
        {
            auto a_uuid = boost::uuids::random_generator()();
            return boost::uuids::to_string(a_uuid);
        }

    };

    inline void to_json(json& j, const MR_Parameter& p) {
        j = json{{"uuid",                 p.uuid},
                 {"name",                 p.name},
                 {"description",          p.description},
                 {"reference_file",       p.reference_file},
                 {"reference_class_name", p.reference_class_name},
                 {"MR_para_str",          p.MR_para_str},
                 {"testunit_seeds",       p.testunit_seeds}};
    }

    inline void from_json(const json& j, MR_Parameter& p) {

        j.at("uuid").get_to(p.uuid);
        j.at("name").get_to(p.name);
        j.at("description").get_to(p.description);
        j.at("reference_file").get_to(p.reference_file);
        j.at("reference_class_name").get_to(p.reference_class_name);
        j.at("MR_para_str").get_to(p.MR_para_str);
        j.at("testunit_seeds").get_to(p.testunit_seeds);
    }
}
